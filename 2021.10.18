1. 자바스크립트는 명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍을 지원하는 멀티 패러다임 프로그래밍 언어이다.
자바스크립트는 객체 기반의 프로그래밍 언어이며 자바스크립트를 이루고 있는 거의 '모든 것'이 객체다. 
원시 타입(primitive type)의 값을 제외한 나머지 값들(함수, 배열, 정규표현식 등)은 모두 객체다

객체지향 프로그래밍은 실세계의 실체(사물이나 개념)를 인식하는 철학적 사고를 프로그래밍에 접목시키려는 시도에서 시작한다.
실체는 특징이나 성질을 나타내는 속성(attribute/property)을 가지고 있고, 이를 통해 실체를 인식하거나 구별할 수 있다.
우리가 구현하려는 프로그램에서는 사람의 이름, 주소라는 속성에만 관심이 있다고 가정하자. 
이처럼 다양한 속성 중에서 프로그램에 필요한 속성만 간추려 내어 표현하는 것을 추상화(abstarction)라 한다.

예제
// const person = {
  name: 'tt',
  address: 'busan',
};
console.log(person); // {name: 'tt', address: 'busan'}

이처럼 속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조를 객체라 하며, 
객체지향 프로그래밍은 독립적인 객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임이다.

예제 2 
const circle ={
  radius : 5, // 반지름
  getDiameter(){
    return  2 * this.radius;
  }
}

이처럼 객체희 상태를 나타내는 데이터와 상태 데이터를 조작할 수 있는 동작을 하나의 논리적인 단위로 묶어 생각한다.
따라서 객체는 상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조라 할 수 있다.


2. 상속과 프로토타입

상속(inheritance)은 객체지향 프로그래밍의 핵심 개념으로, 어떤 객체의 프로퍼티 또는 메시드를 다른 객체가 상속받아 그대로 사용할 수 있는 것을 말한다.
자바스크립트는 프로토타입을 기반으로 상속을 구현하여 불필요한 중복을 제거한다. 중복을 제거하는 방법은 기존의 코드를 적극적으로 재사용하는 것이다.

//생성자 함수
fucntion Circle(radius){
  this.radius = radius;
  this.getArea = function(){
    return Math.PI * this.radius **2;
  };
}

//반지름이 1인 인스턴스 생성
const circle1 = new Circle(1);
//반지름이 2인 인스턴스 생성
const circle2 = new Circle(2);

생성자 함수는 동일한 프로퍼티(메서드 포함) 구조를 갖는 객체 여러 개 생성할 때 유용하다. 하지만 위 예제 생성자 함수는 문제가 있다.
Circle 생성자 함수가 생성하는 모든 객체(인스턴스)는 radius 프로퍼티와 getArea 메서드를 가진다.
radius 프로퍼티 값은 일반적으로 인스턴스마다 다르다. 
하지만 getArea 메서드는 모든 인스턴스가 동일한 내용의 메서드를 사용하므로 단 하나만 생성하여 모든 인스턴스가 공유해서 사용하는 것이 바람직하다
모든 인스턴스가 동일한 메서드를 중복 소요하는 것은 메모리를 불필요하게 낭비한다.
이는 상속을 통해 불필요한 중복을 제거할 수 있다. 자바스크립트는 프로토타입을 기반으로 상속을 구현한다.
function Circle(radius){
  this.radius = radius;
}

Circle.prototype.getArea = function(){
  return Math.PI * this.radius **2;
};

const circle1 = new Circle(1);
const circle2 = new Circle(2);

Circle 생성자 함수가 생성한 모든 인스턴스는 부모 객체의 역할을 하는 프로토 타입 Circle.prototype으로부터 getArea 메서드를 상속받는다.
즉, Circle 생성자 함수가 생성하는 모든 인스턴스는 하나의 getArea 메서드를 공유한다.

console.log(circle1.getArea === circle2.getArea); //true

console.log(circle1.getArea()); // 3.1415....
console.log(circle2.getArea()); // 12.5663...

즉 자신의 상태를 나타내는 radius 프로퍼티만 개별적으로 소유하고 내용이 동일한 메서드는 상속을 통해 공유하여 사용하는 것이다.
