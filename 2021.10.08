1. 순수함수 : 외부상태에도 의존하지 않고, 외부상태도 변경하지 않는 함수 
   비순수함수 : 외부상태에 의존하거나 외부상태를 변경하는 함수

순수함수 예시

var count = 0;
function increase(n){ // 순수함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.
  return ++n;
  }
count = increase(count); // 순수함수가 반환한 결과값을 변수에 재할당해서 상태를 변경
console.log(count); // 1

count = increase(count);
console.log(count); // 2

비순수함수 예시 

var count = 0;
function increase(){    //외부상태에 의존하며 외부상태를 변경한다
  return ++count;     
}
// 비순수함수는 외부상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.
increase();
console.log(count); // 1
increase();
console.log(count); // 2

함수가 외부상태를 변경하면 상태변화를 추적하기 어려워진다. 따라서 외부상태의 변경을 지양하는 순수함수를 사용하는 것이 좋다.

2. 함수형 프로그래밍
순수함수와 보조함수의 조합을 통해 외부상태를 변경하는 부수효과를 최소화해서 불변성을 지향하는 프로그래밍 패러다임이다.
오류를 피하고 프로그램의 안전성을 높이려는 노력의 일환이다.

3. 중첩함수: 함수 몸체 내부에서 정의된 함수
   외부함수: 중첩 함수를 포함하는 함수
   렉시컬환경(lexical environment) 스코프체인은 실행 컨텍스트의 렉시컬 환경을 단방향적으로 연결한 것이다.
   전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다.
   스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 한다.
   
   실행컨텍스트
   식별자(변수,함수,클래스 등의 이름)을 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 메커니즘으로 
   모든 코드는 실행 콘텍스트를 통해 실행되고 관리 된다. 실행 컨텍스트 스택을 콜스택이라고 부르기도 하다.
